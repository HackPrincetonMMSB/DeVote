{
  "_args": [
    [
      {
        "raw": "ethereumjs-abi@git+https://github.com/ethereumjs/ethereumjs-abi.git",
        "scope": null,
        "escapedName": "ethereumjs-abi",
        "name": "ethereumjs-abi",
        "rawSpec": "git+https://github.com/ethereumjs/ethereumjs-abi.git",
        "spec": "git+https://github.com/ethereumjs/ethereumjs-abi.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:ethereumjs/ethereumjs-abi.git",
          "sshUrl": "git+ssh://git@github.com/ethereumjs/ethereumjs-abi.git",
          "httpsUrl": "git+https://github.com/ethereumjs/ethereumjs-abi.git",
          "gitUrl": "git://github.com/ethereumjs/ethereumjs-abi.git",
          "shortcut": "github:ethereumjs/ethereumjs-abi",
          "directUrl": "https://raw.githubusercontent.com/ethereumjs/ethereumjs-abi/master/package.json"
        }
      },
      "/Users/michaelzman/Documents/workspace/Devote/node_modules/eth-sig-util"
    ]
  ],
  "_from": "git+https://github.com/ethereumjs/ethereumjs-abi.git",
  "_id": "ethereumjs-abi@0.6.4",
  "_inCache": true,
  "_location": "/ethereumjs-abi",
  "_phantomChildren": {},
  "_requested": {
    "raw": "ethereumjs-abi@git+https://github.com/ethereumjs/ethereumjs-abi.git",
    "scope": null,
    "escapedName": "ethereumjs-abi",
    "name": "ethereumjs-abi",
    "rawSpec": "git+https://github.com/ethereumjs/ethereumjs-abi.git",
    "spec": "git+https://github.com/ethereumjs/ethereumjs-abi.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:ethereumjs/ethereumjs-abi.git",
      "sshUrl": "git+ssh://git@github.com/ethereumjs/ethereumjs-abi.git",
      "httpsUrl": "git+https://github.com/ethereumjs/ethereumjs-abi.git",
      "gitUrl": "git://github.com/ethereumjs/ethereumjs-abi.git",
      "shortcut": "github:ethereumjs/ethereumjs-abi",
      "directUrl": "https://raw.githubusercontent.com/ethereumjs/ethereumjs-abi/master/package.json"
    }
  },
  "_requiredBy": [
    "/eth-sig-util"
  ],
  "_resolved": "git+https://github.com/ethereumjs/ethereumjs-abi.git#ee6ded67235a98f3ef4ae2a338aee70a9f68fe20",
  "_shasum": "8c0ba9a11c81fb0ce4db849b6af6534fb1ecfff2",
  "_shrinkwrap": null,
  "_spec": "ethereumjs-abi@git+https://github.com/ethereumjs/ethereumjs-abi.git",
  "_where": "/Users/michaelzman/Documents/workspace/Devote/node_modules/eth-sig-util",
  "author": {
    "name": "Alex Beregszaszi",
    "email": "alex@rtfs.hu"
  },
  "bugs": {
    "url": "https://github.com/axic/ethereumjs-abi/issues"
  },
  "dependencies": {
    "bn.js": "^4.10.0",
    "ethereumjs-util": "^4.3.0"
  },
  "description": "Decoder and encoder for the Ethereum ABI",
  "devDependencies": {
    "coveralls": "^2.11.4",
    "istanbul": "^0.4.1",
    "mocha": "^2.1.0",
    "standard": "^5.4.1"
  },
  "gitHead": "ee6ded67235a98f3ef4ae2a338aee70a9f68fe20",
  "homepage": "https://github.com/axic/ethereumjs-abi",
  "keywords": [
    "ethereum",
    "ABI"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "ethereumjs-abi",
  "optionalDependencies": {},
  "readme": "# ethereumjs-abi\n\n[![NPM Package](https://img.shields.io/npm/v/ethereumjs-abi.svg?style=flat-square)](https://www.npmjs.org/package/ethereumjs-abi)\n[![Build Status](https://img.shields.io/travis/ethereumjs/ethereumjs-abi.svg?branch=master&style=flat-square)](https://travis-ci.org/ethereumjs/ethereumjs-abi)\n[![Coverage Status](https://img.shields.io/coveralls/ethereumjs/ethereumjs-abi.svg?style=flat-square)](https://coveralls.io/r/ethereumjs/ethereumjs-abi)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](http://standardjs.com/)\n[![Gitter](https://img.shields.io/gitter/room/ethereum/ethereumjs-lib.svg?style=flat-square)](https://gitter.im/ethereum/ethereumjs-lib) or #ethereumjs on freenode\n\n\nModule implementing the [Ethereum ABI](https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI) in Javascript. Can be used with RPC libraries for communication or with ethereumjs-vm to implement a fully fledged simulator.\n\n## Usage\n\n#### Manual encoding and decoding\n\nThere are three methods of interest:\n- ```methodID``` to create a function signature\n- ```rawEncode``` to encode fields and\n- ```rawDecode``` to decode fields\n\nExample code:\n```js\nvar abi = require('ethereumjs-abi')\n\n// returns the encoded binary (as a Buffer) data to be sent\nvar encoded = abi.rawEncode([ \"address\" ], [ \"0x0000000000000000000000000000000000000000\" ])\n\n// returns the decoded array of arguments\nvar decoded = abi.rawDecode([ \"address\" ], data)\n```\n\n#### Encoding and decoding aided by the JSON ABI definition\n\nPlanned for the future is supporting the JSON ABI definition:\n\n```js\nvar abi = require('ethereumjs-abi')\n\n// need to have the ABI definition in JSON as per specification\nvar tokenAbi = [{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"}]\n\nvar encoded = abi.encode(tokenAbi, \"balanceOf(uint256 address)\", [ \"0x0000000000000000000000000000000000000000\" ])\n\nvar decoded = abi.decode(tokenAbi, \"balanceOf(uint256 address)\", data)\n```\n\n#### Simple encoding and decoding\n\n```js\nvar abi = require('ethereumjs-abi')\n\n// returns the encoded binary (as a Buffer) data to be sent\nvar encoded = abi.simpleEncode(\"balanceOf(address):(uint256)\", \"0x0000000000000000000000000000000000000000\")\n\n// returns the decoded array of arguments\nvar decoded = abi.simpleDecode(\"balanceOf(address):(uint256)\", data)\n```\n\n#### Solidity *tightly packed* formats\n\nThis library also supports creating Solidity's tightly packed data constructs, which are used together with ```sha3```, ```sha256``` and ```ripemd160``` to create hashes.\n\nSolidity code:\n```js\ncontract HashTest {\n  function testSha3() returns (bytes32) {\n   address addr1 = 0x43989fb883ba8111221e89123897538475893837;\n   address addr2 = 0;\n   uint val = 10000;\n   uint timestamp = 1448075779;\n\n   return sha3(addr1, addr2, val, timestamp); // will return 0xc3ab5ca31a013757f26a88561f0ff5057a97dfcc33f43d6b479abc3ac2d1d595\n }\n}\n```\n\nCreating the same hash using this library:\n```js\nvar abi = require('ethereumjs-abi')\nvar BN = require('bn.js')\n\nabi.soliditySHA3(\n    [ \"address\", \"address\", \"uint\", \"uint\" ],\n    [ new BN(\"43989fb883ba8111221e89123897538475893837\", 16), 0, 10000, 1448075779 ]\n).toString('hex')\n```\n\nFor the same data structure:\n* sha3 will return ```0xc3ab5ca31a013757f26a88561f0ff5057a97dfcc33f43d6b479abc3ac2d1d595```\n* sha256 will return ```0x344d8cb0711672efbdfe991f35943847c1058e1ecf515ff63ad936b91fd16231```\n* ripemd160 will return ```0x000000000000000000000000a398cc72490f72048efa52c4e92067e8499672e7``` (NOTE: it is 160bits, left padded to 256bits)\n\nNote that ```ripemd160()``` in Solidity returns bytes20 and if you cast it to bytes32, it will be right padded with zeroes.\n\n#### Using Serpent types\n\nSerpent uses a different notation for the types, even though it will serialize to the same ABI.\n\nWe provide two helpers to convert between these notations:\n* ```fromSerpent```: convert a Serpent notation to the ABI notation\n* ```toSerpent```: the other way around\n\nExample usage:\n```js\nabi.fromSerpent('s')    // [ 'bytes' ]\nabi.fromSerpent('i')    // [ 'int256' ]\nabi.fromSerpent('a')    // [ 'int256[]' ]\nabi.fromSerpent('b8')   // [ 'bytes8' ]\nabi.fromSerpent('b8i')  // [ 'bytes8', 'int256' ]\n\nabi.toSerpent([ 'bytes' ])             // 's'\nabi.toSerpent([ 'int256' ])            // 'i'\nabi.toSerpent([ 'int256[]' ])          // 'a'\nabi.toSerpent([ 'bytes8' ])            // 'b8'\nabi.toSerpent([ 'bytes8', 'int256' ])  // 'b8i'\n```\n\nIt is to be used in conjunction with ```rawEncode``` and ```rawDecode```:\n\n```js\nvar encoded = abi.rawEncode(\"balanceOf\", abi.fromSerpent(\"i\"), [ \"0x0000000000000000000000000000000000000000\" ])\n\nvar decoded = abi.rawDecode(\"balanceOf\", abi.fromSerpent(\"i\"), abi.fromSerpent(\"i\"), data)\n```\n\nNote: Serpent uses arbitary binary fields. If you want to store strings it is preferable to ensure it is stored as UTF8. `new Buffer(<string>, 'utf8')` can be used to ensure it is properly encoded.\n\n## Contributing\n\nI am more than happy to receive improvements. Please send me a pull request or reach out on email or twitter.\n\nThere is a lot missing, grep for *FIXME* in the source code to find inspiration.\n\n## License\n\n    Copyright (C) 2015 Alex Beregszaszi\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy of\n    this software and associated documentation files (the \"Software\"), to deal in\n    the Software without restriction, including without limitation the rights to\n    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n    the Software, and to permit persons to whom the Software is furnished to do so,\n    subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/axic/ethereumjs-abi.git"
  },
  "scripts": {
    "coverage": "istanbul cover _mocha",
    "coveralls": "npm run coverage && coveralls <coverage/lcov.info",
    "lint": "standard",
    "prepublish": "npm run lint && npm run test",
    "test": "istanbul test _mocha -- --reporter spec"
  },
  "standard": {
    "globals": [
      "describe",
      "it"
    ]
  },
  "version": "0.6.4"
}
